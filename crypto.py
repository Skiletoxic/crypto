import streamlit as st
from datetime import date, datetime, timedelta
import pandas as pd
import numpy as np
from binance.client import Client
from prophet import Prophet
from prophet.plot import plot_plotly
from plotly import graph_objs as go
import plotly.express as px
import time
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
START_DEFAULT = "2020-01-01"
TODAY = date.today().strftime("%Y-%m-%d")

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
.metric-container {
    background-color: #f0f2f6;
    padding: 10px;
    border-radius: 10px;
    margin: 5px 0;
}
.success-text {
    color: #00ff00;
    font-weight: bold;
}
.error-text {
    color: #ff0000;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

st.title('üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π')

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
stocks = {
    'Bitcoin (BTC)': 'BTCUSDT',
    'Ethereum (ETH)': 'ETHUSDT',
    'Binance Coin (BNB)': 'BNBUSDT',
    'Ripple (XRP)': 'XRPUSDT',
    'Cardano (ADA)': 'ADAUSDT',
    'Solana (SOL)': 'SOLUSDT',
    'Polygon (MATIC)': 'MATICUSDT',
    'Avalanche (AVAX)': 'AVAXUSDT',
    'Chainlink (LINK)': 'LINKUSDT',
    'Uniswap (UNI)': 'UNIUSDT',
    'Litecoin (LTC)': 'LTCUSDT',
    'Polkadot (DOT)': 'DOTUSDT'
}

selected_name = st.sidebar.selectbox('ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', list(stocks.keys()))
selected_stock = stocks[selected_name]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
st.sidebar.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥")
start_date = st.sidebar.date_input(
    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
    value=datetime.strptime(START_DEFAULT, "%Y-%m-%d").date(),
    min_value=datetime(2017, 1, 1).date(),
    max_value=datetime.now().date()
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
st.sidebar.subheader("üîÆ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
n_years = st.sidebar.slider('–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ª–µ—Ç):', 0.1, 4.0, 1.0, 0.1)
period = int(n_years * 365)

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Prophet
st.sidebar.subheader("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
yearly_seasonality = st.sidebar.checkbox("–ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=True)
weekly_seasonality = st.sidebar.checkbox("–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=True)
daily_seasonality = st.sidebar.checkbox("–î–Ω–µ–≤–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=False)
changepoint_prior_scale = st.sidebar.slider("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ç—Ä–µ–Ω–¥–∞–º", 0.001, 0.5, 0.05, 0.001)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance API
@st.cache_resource
def init_binance_client():
    try:
        return Client()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance API: {e}")
        return None

client = init_binance_client()

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
def load_data(symbol, start_date_str):
    if not client:
        return None
        
    try:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        all_klines = []
        start_time = int(pd.Timestamp(start_date_str).timestamp() * 1000)
        end_time = int(pd.Timestamp(TODAY).timestamp() * 1000)
        
        total_days = (pd.Timestamp(TODAY) - pd.Timestamp(start_date_str)).days
        processed_days = 0
        
        while start_time < end_time:
            status_text.text(f'üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_days}/{total_days} –¥–Ω–µ–π...')
            
            klines = client.get_klines(
                symbol=symbol, 
                interval=Client.KLINE_INTERVAL_1DAY,
                startTime=start_time, 
                endTime=end_time,
                limit=1000
            )
            
            if not klines:
                break
            
            all_klines.extend(klines)
            start_time = klines[-1][0] + 1
            processed_days += len(klines)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progress = min(processed_days / total_days, 1.0)
            progress_bar.progress(progress)
            
            time.sleep(0.1)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        progress_bar.progress(1.0)
        status_text.text('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
        
        if not all_klines:
            return None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume',
                  'close_time', 'quote_asset_volume', 'number_of_trades', 
                  'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore']
        
        df = pd.DataFrame(all_klines, columns=columns)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        numeric_columns = ['open', 'high', 'low', 'close', 'volume']
        df[numeric_columns] = df[numeric_columns].astype(float)
        df['date'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        df = df.drop_duplicates(subset=['timestamp']).sort_values('date')
        
        return df[['date', 'open', 'high', 'low', 'close', 'volume']]
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
def calculate_technical_indicators(df):
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    df = df.copy()
    
    # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    df['MA_7'] = df['close'].rolling(window=7).mean()
    df['MA_30'] = df['close'].rolling(window=30).mean()
    df['MA_90'] = df['close'].rolling(window=90).mean()
    
    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    # Bollinger Bands
    df['BB_middle'] = df['close'].rolling(window=20).mean()
    bb_std = df['close'].rolling(window=20).std()
    df['BB_upper'] = df['BB_middle'] + (bb_std * 2)
    df['BB_lower'] = df['BB_middle'] - (bb_std * 2)
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    df['volatility'] = df['close'].pct_change().rolling(window=30).std() * np.sqrt(365)
    
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
def model_diagnostics(model, forecast, actual_data):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    forecast_comparison = forecast.set_index('ds')
    actual_comparison = actual_data.set_index('date')
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    comparison = actual_comparison.join(forecast_comparison, how='inner')
    comparison = comparison.dropna()
    
    if len(comparison) == 0:
        return None
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    mae = np.mean(np.abs(comparison['close'] - comparison['yhat']))
    mape = np.mean(np.abs((comparison['close'] - comparison['yhat']) / comparison['close'])) * 100
    rmse = np.sqrt(np.mean((comparison['close'] - comparison['yhat']) ** 2))
    
    return {
        'MAE': mae,
        'MAPE': mape,
        'RMSE': rmse,
        'R¬≤': np.corrcoef(comparison['close'], comparison['yhat'])[0, 1] ** 2
    }

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if client:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    start_date_str = start_date.strftime("%Y-%m-%d")
    data = load_data(selected_stock, start_date_str)
    
    if data is not None and not data.empty:
        # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        data_with_indicators = calculate_technical_indicators(data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∞–∫–µ—Ç–∞
        col1, col2, col3, col4 = st.columns(4)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        with col1:
            current_price = data['close'].iloc[-1]
            st.metric("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:,.2f}")
        
        with col2:
            price_change = ((data['close'].iloc[-1] / data['close'].iloc[-2]) - 1) * 100
            st.metric("üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å", f"{price_change:+.2f}%")
        
        with col3:
            max_price = data['close'].max()
            st.metric("üîù –ú–∞–∫—Å–∏–º—É–º", f"${max_price:,.2f}")
        
        with col4:
            min_price = data['close'].min()
            st.metric("üîª –ú–∏–Ω–∏–º—É–º", f"${min_price:,.2f}")
        
        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä –î–∞–Ω–Ω—ã–µ", "üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑", "üß† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "üìã –û—Ç—á–µ—Ç"])
        
        with tab1:
            st.subheader(f'üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ({selected_name})')
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            fig_main = go.Figure()
            fig_main.add_trace(go.Candlestick(
                x=data['date'],
                open=data['open'],
                high=data['high'],
                low=data['low'],
                close=data['close'],
                name='–¶–µ–Ω–∞'
            ))
            
            fig_main.update_layout(
                title=f'–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {selected_name}',
                xaxis_title='–î–∞—Ç–∞',
                yaxis_title='–¶–µ–Ω–∞ (USDT)',
                height=500
            )
            st.plotly_chart(fig_main, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ")
            st.dataframe(data.tail(10))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            col1, col2 = st.columns(2)
            with col1:
                csv_historical = data.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
                    data=csv_historical,
                    file_name=f"{selected_stock}_historical_data_{TODAY}.csv",
                    mime="text/csv",
                    key="download_historical"
                )
            
            with col2:
                csv_technical = data_with_indicators.to_csv(index=False)
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ (CSV)",
                    data=csv_technical,
                    file_name=f"{selected_stock}_technical_analysis_{TODAY}.csv",
                    mime="text/csv",
                    key="download_technical"
                )
        
        with tab2:
            st.subheader("üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            fig_tech = go.Figure()
            fig_tech.add_trace(go.Scatter(x=data_with_indicators['date'], y=data_with_indicators['close'], 
                                        name='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è', line=dict(color='black', width=2)))
            fig_tech.add_trace(go.Scatter(x=data_with_indicators['date'], y=data_with_indicators['MA_7'], 
                                        name='MA 7', line=dict(color='blue')))
            fig_tech.add_trace(go.Scatter(x=data_with_indicators['date'], y=data_with_indicators['MA_30'], 
                                        name='MA 30', line=dict(color='red')))
            fig_tech.add_trace(go.Scatter(x=data_with_indicators['date'], y=data_with_indicators['MA_90'], 
                                        name='MA 90', line=dict(color='green')))
            
            fig_tech.update_layout(title='–¶–µ–Ω–∞ –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ', height=400)
            st.plotly_chart(fig_tech, use_container_width=True)
            
            # RSI
            fig_rsi = go.Figure()
            fig_rsi.add_trace(go.Scatter(x=data_with_indicators['date'], y=data_with_indicators['RSI'], 
                                       name='RSI', line=dict(color='purple')))
            fig_rsi.add_hline(y=70, line_dash="dash", line_color="red", annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ")
            fig_rsi.add_hline(y=30, line_dash="dash", line_color="green", annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ")
            fig_rsi.update_layout(title='RSI (Relative Strength Index)', height=300)
            st.plotly_chart(fig_rsi, use_container_width=True)
        
        with tab3:
            st.subheader(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {n_years} –ª–µ—Ç")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Prophet
            df_train = data[['date', 'close']].dropna().rename(columns={"date": "ds", "close": "y"})
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            with st.spinner('üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...'):
                m = Prophet(
                    yearly_seasonality=yearly_seasonality,
                    weekly_seasonality=weekly_seasonality,
                    daily_seasonality=daily_seasonality,
                    changepoint_prior_scale=changepoint_prior_scale,
                    interval_width=0.95
                )
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–µ–π
                if st.sidebar.checkbox("–ú–µ—Å—è—á–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=True):
                    m.add_seasonality(name='monthly', period=30.5, fourier_order=5)
                
                m.fit(df_train)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –¥–∞—Ç –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
            last_date = df_train['ds'].max()
            future_only = pd.DataFrame({
                'ds': pd.date_range(start=last_date + pd.Timedelta(days=1), periods=period, freq='D')
            })
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç
            forecast_future = m.predict(future_only)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            fig_forecast = go.Figure()
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è)
            fig_forecast.add_trace(go.Scatter(
                x=df_train['ds'],
                y=df_train['y'],
                mode='lines',
                name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                line=dict(color='red', width=2)
            ))
            
            # –ü—Ä–æ–≥–Ω–æ–∑ (—Å–∏–Ω—è—è –ª–∏–Ω–∏—è)
            fig_forecast.add_trace(go.Scatter(
                x=forecast_future['ds'],
                y=forecast_future['yhat'],
                mode='lines',
                name='–ü—Ä–æ–≥–Ω–æ–∑',
                line=dict(color='blue', width=2)
            ))
            
            # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            fig_forecast.add_trace(go.Scatter(
                x=pd.concat([forecast_future['ds'], forecast_future['ds'][::-1]]),
                y=pd.concat([forecast_future['yhat_upper'], forecast_future['yhat_lower'][::-1]]),
                fill='toself',
                fillcolor='rgba(0,100,200,0.2)',
                line=dict(color='rgba(255,255,255,0)'),
                name='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
                showlegend=True
            ))
            
            fig_forecast.update_layout(
                title=f'–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã {selected_name} (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞)',
                xaxis_title='–î–∞—Ç–∞',
                yaxis_title='–¶–µ–Ω–∞ (USDT)',
                height=600,
                hovermode='x unified'
            )
            st.plotly_chart(fig_forecast, use_container_width=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            st.info(f"üî¥ **–ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è**: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ {last_date.strftime('%d.%m.%Y')}")
            st.info(f"üîµ **–°–∏–Ω—è—è –ª–∏–Ω–∏—è**: –ü—Ä–æ–≥–Ω–æ–∑ —Å {(last_date + pd.Timedelta(days=1)).strftime('%d.%m.%Y')}")
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
            future_full = m.make_future_dataframe(periods=period, freq='D')
            forecast_full = m.predict(future_full)
            
            st.subheader("üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
            fig_components = m.plot_components(forecast_full)
            st.pyplot(fig_components)
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
            st.subheader("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã")
            future_dates = [
                datetime.now() + timedelta(days=30),
                datetime.now() + timedelta(days=90),
                datetime.now() + timedelta(days=365)
            ]
            
            for future_date in future_dates:
                if future_date.strftime('%Y-%m-%d') in forecast_future['ds'].dt.strftime('%Y-%m-%d').values:
                    forecast_row = forecast_future[forecast_future['ds'].dt.strftime('%Y-%m-%d') == future_date.strftime('%Y-%m-%d')]
                    if not forecast_row.empty:
                        predicted_price = forecast_row['yhat'].iloc[0]
                        lower_bound = forecast_row['yhat_lower'].iloc[0]
                        upper_bound = forecast_row['yhat_upper'].iloc[0]
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric(f"üìÖ {future_date.strftime('%d.%m.%Y')}", f"${predicted_price:.2f}")
                        with col2:
                            st.metric("üìâ –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞", f"${lower_bound:.2f}")
                        with col3:
                            st.metric("üìà –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞", f"${upper_bound:.2f}")
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
            st.subheader("üíæ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            col1, col2 = st.columns(2)
            with col1:
                csv_forecast = forecast_future[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(columns={
                    'ds': '–î–∞—Ç–∞',
                    'yhat': '–ü—Ä–æ–≥–Ω–æ–∑',
                    'yhat_lower': '–ù–∏–∂–Ω—è—è_–≥—Ä–∞–Ω–∏—Ü–∞',
                    'yhat_upper': '–í–µ—Ä—Ö–Ω—è—è_–≥—Ä–∞–Ω–∏—Ü–∞'
                }).to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)",
                    data=csv_forecast,
                    file_name=f"{selected_stock}_forecast_{n_years}y_{TODAY}.csv",
                    mime="text/csv",
                    key="download_forecast"
                )
            
            with col2:
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ + –ø—Ä–æ–≥–Ω–æ–∑)
                combined_data = pd.concat([
                    df_train.rename(columns={'ds': '–î–∞—Ç–∞', 'y': '–¶–µ–Ω–∞'}).assign(–¢–∏–ø='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ'),
                    forecast_future[['ds', 'yhat']].rename(columns={'ds': '–î–∞—Ç–∞', 'yhat': '–¶–µ–Ω–∞'}).assign(–¢–∏–ø='–ü—Ä–æ–≥–Ω–æ–∑')
                ])
                csv_combined = combined_data.to_csv(index=False)
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
                    data=csv_combined,
                    file_name=f"{selected_stock}_combined_{TODAY}.csv",
                    mime="text/csv",
                    key="download_combined"
                )
        
        with tab4:
            st.subheader("üß† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            future_full = m.make_future_dataframe(periods=period, freq='D')
            forecast_full = m.predict(future_full)
            diagnostics = model_diagnostics(m, forecast_full, data)
            
            if diagnostics:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("MAE", f"{diagnostics['MAE']:.2f}")
                with col2:
                    st.metric("MAPE", f"{diagnostics['MAPE']:.2f}%")
                with col3:
                    st.metric("RMSE", f"{diagnostics['RMSE']:.2f}")
                with col4:
                    st.metric("R¬≤", f"{diagnostics['R¬≤']:.3f}")
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if diagnostics['MAPE'] < 10:
                    st.success("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (MAPE < 10%)")
                elif diagnostics['MAPE'] < 20:
                    st.warning("‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (MAPE < 20%)")
                else:
                    st.error("‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (MAPE > 20%)")
            
            # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
            if 'yhat' in forecast_full.columns and len(data) > 0:
                residuals_data = forecast_full[forecast_full['ds'].isin(data['date'])].copy()
                residuals_data = residuals_data.merge(
                    data[['date', 'close']], 
                    left_on='ds', 
                    right_on='date', 
                    how='inner'
                )
                
                if not residuals_data.empty:
                    residuals = residuals_data['close'] - residuals_data['yhat']
                    
                    fig_residuals = go.Figure()
                    fig_residuals.add_trace(go.Scatter(
                        x=residuals_data['ds'], 
                        y=residuals,
                        mode='markers',
                        name='–û—Å—Ç–∞—Ç–∫–∏',
                        marker=dict(color='red', size=4)
                    ))
                    fig_residuals.add_hline(y=0, line_dash="dash", line_color="blue")
                    fig_residuals.update_layout(
                        title='–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–º)',
                        xaxis_title='–î–∞—Ç–∞',
                        yaxis_title='–û—Å—Ç–∞—Ç–∫–∏'
                    )
                    st.plotly_chart(fig_residuals, use_container_width=True)
        
        with tab5:
            st.subheader("üìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.write(f"**–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:** {selected_name}")
            st.write(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {start_date} - {TODAY}")
            st.write(f"**–í—Å–µ–≥–æ –¥–Ω–µ–π:** {len(data)}")
            st.write(f"**–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:** {n_years} –ª–µ—Ç ({period} –¥–Ω–µ–π)")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': data['close'].mean(),
                '–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞': data['close'].median(),
                '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': data['close'].std(),
                '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': data['close'].max(),
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': data['close'].min(),
                '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤': data['volume'].mean() if 'volume' in data.columns else 'N/A'
            }
            
            stats_df = pd.DataFrame(list(stats.items()), columns=['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
            st.table(stats_df)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            current_rsi = data_with_indicators['RSI'].iloc[-1] if not pd.isna(data_with_indicators['RSI'].iloc[-1]) else None
            
            if current_rsi:
                if current_rsi > 70:
                    st.warning("‚ö†Ô∏è RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ü–µ–Ω—ã.")
                elif current_rsi < 30:
                    st.success("‚úÖ RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç —Ü–µ–Ω—ã.")
                else:
                    st.info("‚ÑπÔ∏è RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ.")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±—ã
            st.subheader("üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.info("üìä **–í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö:**")
            st.info("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - –≤–∫–ª–∞–¥–∫–∞ '–î–∞–Ω–Ω—ã–µ'")
            st.info("‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã - –≤–∫–ª–∞–¥–∫–∞ '–ü—Ä–æ–≥–Ω–æ–∑'")
            st.info("‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - –≤–∫–ª–∞–¥–∫–∞ '–î–∞–Ω–Ω—ã–µ'")
    
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.")
else:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API.")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("*–î–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.*  –°–æ–∑–¥–∞—Ç–µ–ª—å: –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç –ò–°–ú23-2.*")