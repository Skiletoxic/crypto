import streamlit as st
from datetime import date
import pandas as pd
from binance.client import Client
from prophet import Prophet
from prophet.plot import plot_plotly
from plotly import graph_objs as go
import time

# –î–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
START = "2020-01-01"
TODAY = date.today().strftime("%Y-%m-%d")

st.title('üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç')

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Binance (—Ç–æ—Ä–≥—É—é—Ç—Å—è –≤ USDT)
stocks = {
    'Bitcoin (BTC)': 'BTCUSDT',
    'Ethereum (ETH)': 'ETHUSDT',
    'Binance Coin (BNB)': 'BNBUSDT',
    'Ripple (XRP)': 'XRPUSDT',
    'Cardano (ADA)': 'ADAUSDT',
    'Solana (SOL)':'SOLUSDT'
}
selected_name = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', list(stocks.keys()))
selected_stock = stocks[selected_name]

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
n_years = st.slider('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤ –≥–æ–¥–∞—Ö):', 1, 4)
period = n_years * 365

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance API (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ API-–∫–ª—é—á–µ–π)
client = Client()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
@st.cache_data
def load_data(symbol):
    try:
        all_klines = []
        start_time = int(pd.Timestamp(START).timestamp() * 1000)  # –ù–∞—á–∞–ª–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        while True:
            klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1DAY, 
                                       startTime=start_time, limit=1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 —Å–≤–µ—á–µ–π –∑–∞ —Ä–∞–∑
            
            if not klines:
                break  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            
            all_klines.extend(klines)
            start_time = klines[-1][0] + 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ (—Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã Binance
        
        if not all_klines:
            return None
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        data = pd.DataFrame(all_klines, columns=['–í—Ä–µ–º—è', '–û—Ç–∫—Ä—ã—Ç–∏–µ', '–ú–∞–∫—Å.', '–ú–∏–Ω.', '–ó–∞–∫—Ä—ã—Ç–∏–µ', '–û–±—ä—ë–º',
                                                 '–ó–∞–∫—Ä—ã—Ç–∏–µ_–≤—Ä–µ–º—è', '–û–±—ä—ë–º_–∫–æ—Ç–∏—Ä–æ–≤–∫–∏', '–°–¥–µ–ª–∫–∏', 
                                                 '–û–±—ä—ë–º_–ø–æ–∫—É–ø–æ–∫', '–û–±—ä—ë–º_–ø–æ–∫—É–ø–æ–∫_–∫–æ—Ç–∏—Ä–æ–≤–∫–∏', '–ò–≥–Ω–æ—Ä'])
        
        data['–î–∞—Ç–∞'] = pd.to_datetime(data['–í—Ä–µ–º—è'], unit='ms')
        data['–û—Ç–∫—Ä—ã—Ç–∏–µ'] = data['–û—Ç–∫—Ä—ã—Ç–∏–µ'].astype(float)
        data['–ó–∞–∫—Ä—ã—Ç–∏–µ'] = data['–ó–∞–∫—Ä—ã—Ç–∏–µ'].astype(float)
        
        return data[['–î–∞—Ç–∞', '–û—Ç–∫—Ä—ã—Ç–∏–µ', '–ó–∞–∫—Ä—ã—Ç–∏–µ']]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data_load_state = st.text('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
data = load_data(selected_stock)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
if data is None or data.empty:
    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä.")
    st.stop()

data_load_state.text('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')

st.subheader(f'üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({selected_name})')
st.write(data.tail())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def plot_raw_data():
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=data['–î–∞—Ç–∞'], y=data['–û—Ç–∫—Ä—ã—Ç–∏–µ'], name="–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è", line=dict(color='blue')))
    fig.add_trace(go.Scatter(x=data['–î–∞—Ç–∞'], y=data['–ó–∞–∫—Ä—ã—Ç–∏–µ'], name="–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è", line=dict(color='red')))
    fig.layout.update(
        title='–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–¶–µ–Ω–∞ (USDT)',
        xaxis_rangeslider_visible=True
    )
    st.plotly_chart(fig)

plot_raw_data()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Prophet
df_train = data[['–î–∞—Ç–∞', '–ó–∞–∫—Ä—ã—Ç–∏–µ']].dropna().rename(columns={"–î–∞—Ç–∞": "ds", "–ó–∞–∫—Ä—ã—Ç–∏–µ": "y"})

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å Prophet
m = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=False)
m.add_seasonality(name='monthly', period=30.5, fourier_order=5)  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
m.fit(df_train)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç
future = m.make_future_dataframe(periods=period, freq='D')

# –ü—Ä–æ–≥–Ω–æ–∑
forecast = m.predict(future)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
forecast_ru = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(columns={
    'ds': '–î–∞—Ç–∞',
    'yhat': '–ü—Ä–æ–≥–Ω–æ–∑',
    'yhat_lower': '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞',
    'yhat_upper': '–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞'
})

st.write(forecast_ru.tail())

st.write(f'üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {n_years} –ª–µ—Ç ({selected_stock})')
fig1 = plot_plotly(m, forecast)
fig1.update_layout(title='–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω', xaxis_title='–î–∞—Ç–∞', yaxis_title='–¶–µ–Ω–∞ (USDT)')
st.plotly_chart(fig1)

st.write("üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
fig2 = m.plot_components(forecast)
st.pyplot(fig2)
